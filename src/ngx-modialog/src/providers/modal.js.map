{"version":3,"sources":["../../../../../src/ngx-modialog/src/providers/modal.ts"],"names":[],"mappings":"AAQA,MAAM,iCAAiC,UAAkB;IACvD,MAAM,CAAC,IAAI,KAAK,CAAC,yBAAuB,UAAY,CAAC,CAAC;AACxD,CAAC;AAED;IACE,eAAmB,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;IAAI,CAAC;IAGxC,qBAAK,GAAL;QACE,MAAM,sBAAsB,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IAED,sBAAM,GAAN;QACE,MAAM,sBAAsB,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;IAED,uBAAO,GAAP;QACE,MAAM,sBAAsB,CAAC,SAAS,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACH,oBAAI,GAAJ,UAAK,OAAyB,EAAE,MAAsB;QACpD,MAAM,GAAG,MAAM,IAAI,EAAS,CAAC;QAC7B,IAAI,CAAC;YACH,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAE1D,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvB,OAAO,CAAC,IAAI,CAAC,oKAE8B,CAAC,CAAC;YAC/C,CAAC;YACD,6EAA6E;YAC7E,yCAAyC;YACzC,MAAM,CAAC,OAAO,CAAC,OAAO,CACpB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CACjC,CAAC;QAEJ,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,OAAO,CAAC,MAAM,CAAiB,CAAC,CAAC,CAAC;QAC3C,CAAC;IAEH,CAAC;IAWS,8BAAc,GAAxB,UAA4B,SAAyB,EAAE,iBAA2B;QAChF,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAI,iBAAiB,CAAC,CAAC;IAC1E,CAAC;IAES,+BAAe,GAAzB,UACE,SAAyB,EACzB,kBAA4B,EAC5B,OAAyB;QAEzB,IAAI,KAAK,GAAU,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC1E,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAI,kBAAkB,EAAE,KAAK,CAAC,CAAC;IAClF,CAAC;IAEH,YAAC;AAAD,CAlEA,AAkEC,IAAA","file":"modal.js","sourceRoot":"","sourcesContent":["import { ComponentRef } from '@angular/core';\n\nimport { Overlay } from '../overlay/index';\nimport { Class, Maybe } from '../framework/utils';\nimport { OverlayConfig, ContainerContent } from '../models/tokens';\nimport { DialogRef } from '../models/dialog-ref';\nimport { ModalControllingContextBuilder } from '../models/overlay-context';\n\nexport function unsupportedDropInError(dropInName: string): Error {\n  return new Error(`Unsupported Drop-In ${dropInName}`);\n}\n\nexport abstract class Modal {\n  constructor(public overlay: Overlay) { }\n\n\n  alert(): ModalControllingContextBuilder<any> {\n    throw unsupportedDropInError('alert');\n  }\n\n  prompt(): ModalControllingContextBuilder<any> {\n    throw unsupportedDropInError('prompt');\n  }\n\n  confirm(): ModalControllingContextBuilder<any> {\n    throw unsupportedDropInError('confirm');\n  }\n\n  /**\n   * Opens a modal window inside an existing component.\n   * @param content The content to display, either string, template ref or a component.\n   * @param config Additional settings.\n   * @returns {Promise<DialogRef>}\n   */\n  open(content: ContainerContent, config?: OverlayConfig): Promise<DialogRef<any>> {\n    config = config || {} as any;\n    try {\n      let dialogs = this.overlay.open(config, this.constructor);\n\n      if (dialogs.length > 1) {\n        console.warn(`Attempt to open more then 1 overlay detected.\n        Multiple modal copies are not supported at the moment, \n        only the first viewContainer will display.`);\n      }\n      // TODO:  Currently supporting 1 view container, hence working on dialogs[0].\n      //        upgrade to multiple containers.\n      return Promise.resolve(\n        this.create(dialogs[0], content)\n      );\n\n    } catch (e) {\n      return Promise.reject<DialogRef<any>>(e);\n    }\n\n  }\n\n  /**\n   * A Hook that enables derived classes to add content to the overlay.\n   * @param dialogRef\n   * @param type\n   * @returns {Maybe<DialogRef<any>>}\n   */\n  protected abstract create(dialogRef: DialogRef<any>, type: ContainerContent): Maybe<DialogRef<any>>;\n\n\n  protected createBackdrop<T>(dialogRef: DialogRef<any>, BackdropComponent: Class<T>): ComponentRef<T> {\n    return dialogRef.overlayRef.instance.addComponent<T>(BackdropComponent);\n  }\n\n  protected createContainer<T>(\n    dialogRef: DialogRef<any>,\n    ContainerComponent: Class<T>,\n    content: ContainerContent): ComponentRef<T> {\n\n    let nodes: any[] = dialogRef.overlayRef.instance.getProjectables(content);\n    return dialogRef.overlayRef.instance.addComponent<T>(ContainerComponent, nodes);\n  }\n\n}\n"]}