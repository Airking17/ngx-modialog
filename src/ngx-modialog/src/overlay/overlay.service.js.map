{"version":3,"sources":["../../../../../src/ngx-modialog/src/overlay/overlay.service.ts"],"names":[],"mappings":"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","file":"overlay.service.js","sourceRoot":"","sourcesContent":["import { ViewContainerRef, Injectable, Injector } from '@angular/core';\n\nimport { OverlayRenderer, OverlayConfig } from '../models/tokens';\nimport { DialogRefStack } from '../models/dialog-ref-stack';\nimport { vcRefStore } from '../models/vc-ref-store';\nimport { DialogRef } from '../models/dialog-ref';\nimport { OverlayContext } from '../models/overlay-context';\n\nconst _stack = new DialogRefStack<any>();\n\n@Injectable()\nexport class Overlay {\n  get stackLength(): number {\n    return _stack.length;\n  }\n\n  constructor(private _modalRenderer: OverlayRenderer, protected injector: Injector) {\n  }\n\n  /**\n   * Check if a given DialogRef is the top most ref in the stack.\n   * TODO: distinguish between body modal vs in element modal.\n   * @param dialogRef\n   * @returns {boolean}\n   */\n  isTopMost(dialogRef: DialogRef<any>): boolean {\n    return _stack.indexOf(dialogRef) === _stack.length - 1;\n  }\n\n  stackPosition(dialogRef: DialogRef<any>) {\n    return _stack.indexOf(dialogRef);\n  }\n\n  groupStackLength(dialogRef: DialogRef<any>): number {\n    return _stack.groupLength(_stack.groupOf(dialogRef));\n  }\n\n\n  /**\n   * Creates an overlay and returns a dialog ref.\n   * @param config instructions how to create the overlay\n   * @param group A token to associate the new overlay with, used for reference (stacks usually)\n   * @returns {DialogRef<T>[]}\n   */\n  open<T extends OverlayContext>(config: OverlayConfig, group?: any): DialogRef<T>[] {\n    let viewContainer = config.viewContainer,\n        containers: Array<ViewContainerRef> = [];\n\n    if (typeof viewContainer === 'string') {\n      containers = vcRefStore.getVCRef(viewContainer as string);\n    } else if (Array.isArray(viewContainer)) {\n      containers = viewContainer as any;\n    } else if (viewContainer) {\n      containers = [viewContainer] as any;\n    } else {\n      containers = [null];\n    }\n\n    return containers\n      .map( vc => this.createOverlay(config.renderer || this._modalRenderer, vc, config, group));\n  }\n\n  private createOverlay(renderer: OverlayRenderer,\n                        vcRef: ViewContainerRef,\n                        config: OverlayConfig,\n                        group: any): DialogRef<any> {\n\n    if (config.context) {\n      config.context.normalize();\n    }\n\n    if (!config.injector) {\n      config.injector = this.injector;\n    }\n\n    let dialog = new DialogRef<any>(this, config.context || {});\n    dialog.inElement = config.context && !!config.context.inElement;\n\n    let cmpRef = renderer.render(dialog, vcRef, config.injector);\n\n    Object.defineProperty(dialog, 'overlayRef', {value: cmpRef});\n    _stack.pushManaged(dialog, group);\n\n    return dialog;\n  }\n}\n"]}