{"version":3,"sources":["../../../../../src/angular2-modal/src/framework/createComponent.ts"],"names":[],"mappings":"AAAA,OAAO,EAGL,wBAAwB,EAGxB,kBAAkB,EAEnB,MAAM,eAAe,CAAC;AAUvB,MAAM,0BAA0B,YAAiC;IAC/D,IAAM,QAAQ,GAAa,WAAW,CAAC,YAAY,CAAC,CAAC;IACrD,IAAM,UAAU,GACZ,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,uBAAuB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IAE3F,EAAE,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;QACvB,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,eAAe,CACvC,UAAU,EACV,YAAY,CAAC,KAAK,CAAC,MAAM,EACzB,QAAQ,EACR,YAAY,CAAC,gBAAgB,CAC9B,CAAC;IACJ,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;AACH,CAAC;AAED,qBAAqB,YAAiC;IACpD,IAAM,WAAW,GAAG,YAAY,CAAC,QAAQ,IAAI,YAAY,CAAC,KAAK,CAAC,cAAc,CAAC;IAC/E,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;QAC7E,kBAAkB,CAAC,qBAAqB,CAAC,YAAY,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,WAAW,CAAC;AAE/F,CAAC","file":"createComponent.js","sourceRoot":"","sourcesContent":["import {\n  ComponentRef,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injector,\n  ViewContainerRef,\n  ReflectiveInjector,\n  ResolvedReflectiveProvider\n} from '@angular/core';\n\nexport interface CreateComponentArgs {\n  component: any;\n  vcRef: ViewContainerRef;\n  injector?: Injector;\n  bindings?: ResolvedReflectiveProvider[];\n  projectableNodes?: any[][];\n}\n\nexport function createComponent(instructions: CreateComponentArgs): ComponentRef<any> {\n  const injector: Injector = getInjector(instructions);\n  const cmpFactory: ComponentFactory<any>\n    = injector.get(ComponentFactoryResolver).resolveComponentFactory(instructions.component);\n\n  if (instructions.vcRef) {\n    return instructions.vcRef.createComponent(\n      cmpFactory,\n      instructions.vcRef.length,\n      injector,\n      instructions.projectableNodes\n    );\n  } else {\n    return cmpFactory.create(injector);\n  }\n}\n\nfunction getInjector(instructions: CreateComponentArgs) {\n  const ctxInjector = instructions.injector || instructions.vcRef.parentInjector;\n  return Array.isArray(instructions.bindings) && instructions.bindings.length > 0 ?\n    ReflectiveInjector.fromResolvedProviders(instructions.bindings, ctxInjector) : ctxInjector;\n\n}\n\n"]}