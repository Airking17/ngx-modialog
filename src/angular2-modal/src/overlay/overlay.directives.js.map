{"version":3,"sources":["../../../../../src/angular2-modal/src/overlay/overlay.directives.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,KAAK,EACL,UAAU,EACV,gBAAgB,EAEjB,MAAM,eAAA,CAAgB;AAEvB,OAAO,EAAE,SAAA,EAAU,MAAO,sBAAA,CAAuB;AACjD,OAAO,EAAE,UAAA,EAAW,MAAO,wBAAA,CAAyB;AAGpD;;;;GAIG;AAIH;IACE,+BAAY,EAAc,EAAE,SAAyB;QACnD,EAAE,CAAC,CAAC,SAAS,IAAI,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;YAClC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;QACnE,CAAC;IACH,CAAC;IALU,qBAAqB;QAHjC,SAAS,CAAC;YACT,QAAQ,EAAE,yBAAyB;SACpC,CAAC;yCAEgB,UAAU,EAAa,SAAS;OADrC,qBAAqB,CAOjC;IAAD,4BAAC;CAPD,AAOC,IAAA;SAPY,qBAAqB;AAYlC;IAUE,uBAAoB,KAAuB;QAAvB,UAAK,GAAL,KAAK,CAAkB;IAAG,CAAC;IATvB,sBAAI,oCAAS;aAAb,UAAc,KAAa;YACjD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,UAAU,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YACzC,CAAC;QACH,CAAC;;;OAAA;IAMD,mCAAW,GAAX;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IAfuB;QAAvB,KAAK,CAAC,eAAe,CAAC;;;kDAKtB;IANU,aAAa;QAHzB,SAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;SAC5B,CAAC;yCAW2B,gBAAgB;OAVhC,aAAa,CAiBzB;IAAD,oBAAC;CAjBD,AAiBC,IAAA;SAjBY,aAAa","file":"overlay.directives.js","sourceRoot":"","sourcesContent":["import {\n  Directive,\n  Input,\n  ElementRef,\n  ViewContainerRef,\n  OnDestroy\n} from '@angular/core';\n\nimport { DialogRef } from '../models/dialog-ref';\nimport { vcRefStore } from '../models/vc-ref-store';\nimport { Overlay } from \"./overlay.service\";\n\n/**\n * A directive use to signal the overlay that the host of this directive\n * is a dialog boundary, i.e: over click outside of the element should close the modal\n * (if non blocking)\n */\n@Directive({\n  selector: '[overlayDialogBoundary]'\n})\nexport class OverlayDialogBoundary {\n  constructor(el: ElementRef, dialogRef: DialogRef<any>) {\n    if (dialogRef && el.nativeElement) {\n      dialogRef.overlayRef.instance.setClickBoundary(el.nativeElement);\n    }\n  }\n\n}\n\n@Directive({\n  selector: '[overlayTarget]'\n})\nexport class OverlayTarget implements OnDestroy {\n  @Input('overlayTarget') set targetKey(value: string) {\n    this._targetKey = value;\n    if (value) {\n      vcRefStore.setVCRef(value, this.vcRef);\n    }\n  }\n\n  private _targetKey: string;\n\n  constructor(private vcRef: ViewContainerRef) {}\n\n  ngOnDestroy() {\n    if (this._targetKey) {\n      vcRefStore.delVCRef(this._targetKey, this.vcRef);\n    }\n  }\n}\n"]}