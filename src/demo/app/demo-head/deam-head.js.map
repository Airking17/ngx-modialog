{"version":3,"sources":["../../../../../src/demo/app/demo-head/deam-head.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,iBAAiB,EACjB,KAAK,EACL,MAAM,EACN,YAAY,EACb,MAAM,eAAA,CAAgB;AA8BvB;IAjBA;QAuBY,gBAAW,GAAmC,IAAI,YAAY,EAAoB,CAAC;IAkB/F,CAAC;IAfC,0BAAO,GAAP,UAAQ,KAAY,EAAE,GAA2B;QAC/C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;YACpB,KAAK,OAAA;YACL,MAAM,EAAE,GAAG;SACZ,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;IACpC,CAAC;IAEO,gCAAa,GAArB,UAAsB,MAA+B;QAArD,iBAMC;QALC,MAAM,CAAC,IAAI,CAAC,UAAC,aAAa;YACxB,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,UAAC,MAAM;gBACtC,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACvB,CAAC,EAAE,cAAM,OAAA,KAAI,CAAC,MAAM,GAAG,WAAW,EAAzB,CAAyB,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC;IArBQ;QAAR,KAAK,EAAE;;2CAAe;IACd;QAAR,KAAK,EAAE;;iDAAqB;IACpB;QAAR,KAAK,EAAE;;mDAAyC;IAEvC;QAAT,MAAM,EAAE;kCAAc,YAAY;iDAA0D;IANlF,QAAQ;QAjBpB,SAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,MAAM,EAAE;gBACN,2PASG;aACJ;YACD,WAAW,EAAE,kBAAkB;YAC/B,aAAa,EAAE,iBAAiB,CAAC,QAAQ;SAC1C,CAAC;OACW,QAAQ,CAwBpB;IAAD,eAAC;CAxBD,AAwBC,IAAA;SAxBY,QAAQ","file":"deam-head.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ViewEncapsulation,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\n\nimport { DialogRef } from 'ngx-modialog';\n\nexport interface ModalCommandDescriptor {\n  text: string;\n  factory: () => Promise<DialogRef<any>>;\n}\nexport interface DropInClickEvent {\n  event: Event;\n  source: ModalCommandDescriptor;\n}\n\n@Component({\n  selector: 'demo-head',\n  styles: [\n    `\n      .btn-dropin {\n          text-transform: uppercase;\n          margin: 15px;\n          /*background-color: #219161;*/\n          border: none;\n          box-shadow: 0 2px 5px 0 rgba(0,0,0,.26);\n          border-radius: 0;\n      }\n      `\n  ],\n  templateUrl: './demo-head.html',\n  encapsulation: ViewEncapsulation.Emulated\n})\nexport class DemoHead {\n  result: any;\n  @Input() title: string;\n  @Input() description: string;\n  @Input() modalCommands: ModalCommandDescriptor[];\n\n  @Output() dropInClick: EventEmitter<DropInClickEvent> = new EventEmitter<DropInClickEvent>();\n\n\n  onClick(event: Event, btn: ModalCommandDescriptor) {\n    this.dropInClick.emit({\n      event,\n      source: btn\n    });\n    this.processDialog(btn.factory());\n  }\n\n  private processDialog(dialog: Promise<DialogRef<any>>) {\n    dialog.then((resultPromise) => {\n      return resultPromise.result.then((result) => {\n        this.result = result;\n      }, () => this.result = 'Rejected!');\n    });\n  }\n}\n"]}