{"version":3,"sources":["../../../../../../src/demo/app/bootstrap-demo/bootstrap-demo-page/bootstrap-demo-page.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,QAAA,EAAU,SAAA,EAAW,QAAA,EAAU,WAAA,EAAa,SAAA,EAAuB,MAAO,eAAA,CAAgB;AAEnG,OAAO,EAAE,oBAAA,EAAqB,MAAO,cAAA,CAAe;AACpD,OAAO,EAAE,KAAA,EAAO,cAAA,EAAe,MAAO,gCAAA,CAAiC;AAGvE,OAAO,EAAE,WAAA,EAAY,MAAO,uBAAA,CAAwB;AACpD,OAAO,KAAK,OAAA,MAAa,YAAA,CAAa;AAItC,IAAI,uBAAkD,CAAC;AAOvD;IAIE,2BAAmB,KAAY,EAAU,QAAkB,EAAU,QAAkB;QAAvF,iBA2DC;QA3DkB,UAAK,GAAL,KAAK,CAAO;QAAU,aAAQ,GAAR,QAAQ,CAAU;QAAU,aAAQ,GAAR,QAAQ,CAAU;QACrF,IAAI,CAAC,aAAa,GAAG;YACnB;gBACE,IAAI,EAAE,eAAe;gBACrB,OAAO,EAAE,cAAM,OAAA,OAAO,CAAC,KAAK,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,EAAhC,CAAgC;aAChD;YACD;gBACE,IAAI,EAAE,gBAAgB;gBACtB,OAAO,EAAE,cAAM,OAAA,OAAO,CAAC,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,EAAjC,CAAiC;aACjD;YACD;gBACE,IAAI,EAAE,iBAAiB;gBACvB,OAAO,EAAE,cAAM,OAAA,OAAO,CAAC,OAAO,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,EAAlC,CAAkC;aAClD;YACD;gBACE,IAAI,EAAE,mBAAmB;gBACzB,OAAO,EAAE,cAAM,OAAA,OAAO,CAAC,SAAS,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,EAApC,CAAoC;aACpD;YACD;gBACE,IAAI,EAAE,oBAAoB;gBAC1B,OAAO,EAAE,cAAM,OAAA,OAAO,CAAC,SAAS,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAA/C,CAA+C;aAC/D;YACD;gBACE,IAAI,EAAE,gBAAgB;gBACtB,OAAO,EAAE,cAAM,OAAA,KAAI,CAAC,KAAK;qBACtB,IAAI,CAAC,cAAc,EAAE,oBAAoB,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,EAAE,cAAc,CAAC,CAAC,EADrE,CACqE;aACrF;YACD;gBACE,IAAI,EAAE,qBAAqB;gBAC3B,OAAO,EAAE,cAAM,OAAA,KAAI,CAAC,KAAK;qBACtB,IAAI,CAAC,KAAI,CAAC,WAAW,EAAE,oBAAoB,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,EAAE,cAAc,CAAC,CAAC,EADvE,CACuE;aACvF;YACD;gBACE,IAAI,EAAE,sBAAsB;gBAC5B,OAAO,EAAE;oBACP,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,oBAAoB,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC,CAAC;oBAChG,wFAAwF;gBAC1F,CAAC;aAEF;SAmBF,CAAC;IACJ,CAAC;IA7DyB;QAAzB,SAAS,CAAC,aAAa,CAAC;kCAAqB,WAAW;0DAAM;IAFpD,iBAAiB;QAL7B,SAAS,CAAC;YACT,QAAQ,EAAE,qBAAqB;YAC/B,SAAS,EAAE,CAAC,2BAA2B,CAAC;YACxC,WAAW,EAAE,gCAAgC;SAC9C,CAAC;yCAK0B,KAAK,EAAoB,QAAQ,EAAoB,QAAQ;OAJ5E,iBAAiB,CAiE7B;IAAD,wBAAC;CAjED,AAiEC,IAAA;SAjEY,iBAAiB","file":"bootstrap-demo-page.js","sourceRoot":"","sourcesContent":["import { Compiler, Component, Injector, TemplateRef, ViewChild, NgModuleRef } from '@angular/core';\n\nimport { overlayConfigFactory } from \"ngx-modialog\";\nimport { Modal, BSModalContext } from 'ngx-modialog/plugins/bootstrap';\n\nimport { ModalCommandDescriptor } from '../../demo-head/index';\nimport { CustomModal } from './custom-modal-sample';\nimport * as presets from '../presets';\n\nimport { RuntimeCompiledModule, RuntimeCompiledComponent } from './runtime-compiled';\n\nlet runtimeModuleRefPromise: Promise<NgModuleRef<any>>;\n\n@Component({\n  selector: 'bootstrap-demo-page',\n  styleUrls: ['./bootstrap-demo-page.css'],\n  templateUrl: './bootstrap-demo-page.tpl.html'\n})\nexport class BootstrapDemoPage {\n  modalCommands: ModalCommandDescriptor[];\n  @ViewChild('templateRef') public templateRef: TemplateRef<any>;\n\n  constructor(public modal: Modal, private compiler: Compiler, private injector: Injector) {\n    this.modalCommands = [\n      {\n        text: 'alert drop in',\n        factory: () => presets.alert(this.modal).open()\n      },\n      {\n        text: 'prompt drop in',\n        factory: () => presets.prompt(this.modal).open()\n      },\n      {\n        text: 'confirm drop in',\n        factory: () => presets.confirm(this.modal).open()\n      },\n      {\n        text: 'Cascading example',\n        factory: () => presets.cascading(this.modal).open()\n      },\n      {\n        text: 'In Element example',\n        factory: () => presets.inElement(this.modal).open('demo-head')\n      },\n      {\n        text: 'String content',\n        factory: () => this.modal\n          .open('Hello modal!', overlayConfigFactory({ isBlocking: false }, BSModalContext))\n      },\n      {\n        text: 'TemplateRef content',\n        factory: () => this.modal\n          .open(this.templateRef, overlayConfigFactory({ isBlocking: false }, BSModalContext))\n      },\n      {\n        text: 'Custom Modal content',\n        factory: () => {\n          return this.modal.open(CustomModal, overlayConfigFactory({ num1: 2, num2: 3 }, BSModalContext));\n          // we set the baseContextType to BSModalContext so the defaults for bootstrap will apply\n        }\n\n      },\n      // TODO: Currently AOT build can't support this, need to implement lazy compiler\n      // see https://github.com/shlomiassaf/lazy-jit\n      // {\n      //   text: 'JIT Compiled component',\n      //   factory: () => {\n      //     if (!runtimeModuleRefPromise) {\n      //       runtimeModuleRefPromise = this.compiler.compileModuleAsync(RuntimeCompiledModule)\n      //         .then(moduleFactory => moduleFactory.create(this.injector));\n      //     }\n      //\n      //     return runtimeModuleRefPromise.then(module => {\n      //         return this.modal\n      //           .open(RuntimeCompiledComponent, overlayConfigFactory({isBlocking: false}, BSModalContext, {\n      //             injector: module.injector\n      //           }));\n      //       });\n      //   }\n      // }\n    ];\n  }\n\n}\n"]}